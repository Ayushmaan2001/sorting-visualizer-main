export declare type ICompareFunction<T> = (obj1: T, obj2: T) => number;
export declare function minNumberCompare(num1: number, num2: number): number;
export declare function MaxNumberComparer(num1: number, num2: number): number;
export declare class Heap<T> {
    private items;
    private itemToIndexMap;
    private innerCompare;
    constructor(compareFunction: ICompareFunction<T>);
    peek(): T | undefined;
    add(item: T): void;
    pop(): T | undefined;
    readonly size: number;
    readonly isEmpty: boolean;
    remove(item: T): boolean;
    clear(): void;
    contains(item: T): boolean;
    [Symbol.iterator](): IterableIterator<T>;
    private compare(a, b);
    private removeAt(index);
    private getLeftChildIndex(nodeIndex);
    private getParentIndex(nodeIndex);
    private getSmallerChildIndex(leftChildIndex, rightChildIndex);
    private bubbleUpToPlace(index);
    private bubbleDownToPlace(index);
    private swap(i1, i2, data1?, data2?);
}
